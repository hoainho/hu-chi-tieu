rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============= HELPER FUNCTIONS =============
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(ownerId) {
      return request.auth.uid == ownerId;
    }
    
    function isResourceOwner() {
      return request.auth.uid == resource.data.ownerId;
    }
    
    function isRequestOwner() {
      return request.auth.uid == request.resource.data.ownerId;
    }
    
    function hasPartnerAccess(coupleId) {
      return coupleId != null && 
        exists(/databases/$(database)/documents/couples/$(coupleId)) &&
        request.auth.uid in get(/databases/$(database)/documents/couples/$(coupleId)).data.members;
    }
    
    function canAccessSharedResource() {
      return isResourceOwner() || 
        (resource.data.keys().hasAny(['coupleId']) && 
         resource.data.coupleId != null && 
         hasPartnerAccess(resource.data.coupleId));
    }
    
    // ============= GENERIC RULES FOR OWNER-BASED COLLECTIONS =============
    
    // Pattern: Any collection with ownerId field
    // This covers: transactions, incomes, spendingSources, savingsGoals, 
    //              savingsGoalTransactions, categories, assets, investments, etc.
    match /{collection}/{documentId} {
      // Allow read if user is owner or has partner access
      allow read: if isAuthenticated() && (
        isResourceOwner() || 
        (resource.data.keys().hasAny(['coupleId']) && 
         resource.data.coupleId != null && 
         hasPartnerAccess(resource.data.coupleId))
      );
      
      // Allow create if user is setting themselves as owner
      allow create: if isAuthenticated() && isRequestOwner();
      
      // Allow update if user is owner
      allow update: if isAuthenticated() && isResourceOwner();
      
      // Allow delete if user is owner
      allow delete: if isAuthenticated() && isResourceOwner();
    }
    
    // ============= SPECIFIC OVERRIDES (if needed) =============
    
    // Users collection - special handling
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Subcollections
      match /availableBalance/{month} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      match /availableBalanceTransactions/{transactionId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // Accounts - special handling for ownerIds array
    match /accounts/{accountId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.ownerIds;
      
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.ownerIds;
      
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.ownerIds;
      
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.ownerIds;
    }
    
    // Couples - special handling
    match /couples/{coupleId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid in resource.data.members;
      
      // Subcollections
      match /availableBalance/{month} {
        allow read, write: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/couples/$(coupleId)).data.members;
      }
      
      match /availableBalanceTransactions/{transactionId} {
        allow read, write: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/couples/$(coupleId)).data.members;
      }
    }
    
    // Invites - anyone authenticated can read/write
    match /invites/{inviteId} {
      allow read, write: if isAuthenticated();
    }
    
    match /accountInvites/{inviteId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.inviterUserId ||
        request.auth.email == resource.data.inviteeEmail
      );
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.inviterUserId;
      
      allow update: if isAuthenticated() && 
        request.auth.email == resource.data.inviteeEmail;
      
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.inviterUserId;
    }
    
    // Public read collections (rates, gold prices, etc.)
    match /rates/{rateId} {
      allow read: if true;
      allow write: if false; // Only Cloud Functions
    }
    
    match /goldPrices/{priceId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /goldPriceHistory/{historyId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /systemStatus/{statusId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Audit logs - read only for users
    match /audit/{logId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        (resource.data.keys().hasAny(['userIds']) && 
         request.auth.uid in resource.data.userIds)
      );
      
      allow create: if isAuthenticated();
      allow update, delete: if false; // Immutable
    }
    
    match /auditLogs/{logId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        (resource.data.keys().hasAny(['affectedUserIds']) &&
         resource.data.affectedUserIds != null && 
         request.auth.uid in resource.data.affectedUserIds)
      );
      
      allow write: if false; // Only system
    }
  }
}
